{"version":3,"sources":["lib/GoogleAuth.ts","component/Google/LoginButton.tsx","component/Google/Auth.tsx","route/photo/AlbumList.tsx","route/photo/Upload.tsx","route/Auth.tsx","route/Route.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["exec","_x","_exec","apply","this","arguments","_callee","param","response","_args","regenerator_default","a","wrap","_context","prev","next","length","undefined","hasAuth","scopes","auth","fetch","url","method","headers","Object","assign","Authorization","cookie","get","join","Origin","window","location","protocol","host","body","sent","status","Error","clone","json","abrupt","t0","text","t1","clearAuthCookie","stop","remove","_ref","auth_scope","every","scope","split","includes","_x2","_auth","_callee2","query","featureParams","feature","authWindow","_context2","querystring","stringify","client_id","process","redirect_uri","response_type","include_granted_scopes","console","log","width","height","menubar","toolbar","keys","map","key","open","Promise","resolve","reject","checkAuth","closed","setTimeout","react_default","createElement","id","onClick","props","className","thema","React","Component","state","GoogleAuth","setState","onAuth","_this2","style","textAlign","e","logout","children","Google_LoginButton_default","login","titleText","waitForCreate","listResult","sharedAlbumsList","title","JSON","album","createResult","sharedAlbumOptions","isCollaborative","isCommentable","shareResult","getSharedAlbumsList","Auth_default","type","onChange","target","value","required","createSharedAlbum","disabled","sharedAlbums","margin","href","shareInfo","shareableUrl","productUrl","about","react_router_dom","to","shareToken","images","uploading","getSharedAlbum","isJoined","joinAlbum","match","params","ret","file","Content-type","X-Goog-Upload-Protocol","uploadToken","albumId","newMediaItems","description","simpleMediaItem","newMediaItemResults","forEach","res","code","alert","message","htmlFor","accept","capture","onImageUploaded","idx","src","URL","createObjectURL","alt","name","maxWidth","maxHeight","files","uploadMedia","concat","parse","hash","substring","access_token","token_type","expires_in","maxAge","Number","parseInt","set","expires","close","basename","react_router","exact","path","component","Auth","from","AlbumList","PhotoUpload","render","Route_default","Boolean","hostname","ReactDOM","src_App_default","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.16058922.chunk.js","sourcesContent":["import querystring from 'querystring'\nimport cookie from 'js-cookie';\n\nexport interface Album {\n    \"id\": string,\n    \"title\": string,\n    \"productUrl\": string,\n    \"isWriteable\": boolean,\n    \"shareInfo\"?: ShareInfo,\n    \"mediaItemsCount\": string,\n    \"coverPhotoBaseUrl\": string,\n    \"coverPhotoMediaItemId\": string\n}\nexport interface ShareInfo {\n    \"sharedAlbumOptions\": any,\n    \"shareableUrl\": string,\n    \"shareToken\": string,\n    \"isJoined\": boolean\n}\nexport default {}\nexport async function exec(param: ExecParam, bodyToJson = true): Promise<any> {\n    try {\n        // 認証必要チェック\n        if (!hasAuth(param.scopes)) {\n            await auth(param.scopes);\n        }\n\n        // API 実行\n        const response = await fetch(param.url, {\n            method: param.method,\n            headers: Object.assign({\n                Authorization: [cookie.get('token_type'), cookie.get('access_token')].join(' '),\n                Origin: window.location.protocol + '//' + window.location.host,\n            }, param.headers),\n            body : param.body\n        });\n\n        // statusチェック\n        if (response.status !== 200) {\n            throw new Error('API status NOT 200');\n        }\n\n        try {\n            // JSONデコードしてから返却\n            return await response.clone().json();\n        } catch (error) {\n            // JSON形式ではなかった場合\n            return await response.clone().text();\n        }\n    } catch (error) {\n        // 実行失敗時にcookieを削除\n        clearAuthCookie();\n        throw error;\n    }\n}\n\n/**\n * Google認証のリダイレクトパラメータからアクセストークンを取得し、cookieに設定する。\n */\nexport function setCookieFromAuth(): void {\n    const query: querystring.ParsedUrlQuery = querystring.parse(window.location.hash.substring(1), '&', '=');\n\n    if (typeof (query.scope) !== 'string') return;\n    if (typeof (query.access_token) !== 'string') return;\n    if (typeof (query.token_type) !== 'string') return;\n    if (typeof (query.expires_in) !== 'string') return;\n\n    // cookieにトークン情報を設定\n    const maxAge = Number.parseInt(query.expires_in);\n    cookie.set('scope', query.scope, { expires: maxAge });\n    cookie.set('access_token', query.access_token, { expires: maxAge });\n    cookie.set('token_type', query.token_type, { expires: maxAge });\n}\nexport function clearAuthCookie(): void {\n    cookie.remove('access_token');\n    cookie.remove('scope');\n    cookie.remove('token_type');\n}\n\nexport function hasAuth(scopes: string[]): boolean {\n    const [access_token, auth_scope, token_type] = [cookie.get('access_token'), cookie.get('scope'), cookie.get('token_type')];\n    if (!access_token) return false;\n    if (!auth_scope) return false;\n    if (!token_type) return false;\n    return scopes.every(scope => auth_scope.split(' ').includes(scope));\n}\n\n/**\n * Google認証ポップアップを表示し、認証情報をcookieにセット\n * @param scopes \n */\nexport async function auth(scopes: string[]): Promise<void> {\n    // 認証用ポップアップの設定\n    const query = querystring.stringify({\n        client_id: process.env.REACT_APP_GOOGLE_API_CLIENT_ID,\n        redirect_uri: window.location.protocol + '//' + window.location.host + process.env.PUBLIC_URL +'/auth',\n        response_type: \"token\",\n        scope: scopes.join(' '),\n        include_granted_scopes: 'true',\n    });\n    console.log(process.env)\n    const featureParams: { [key: string]: string } = {\n        width: '450',\n        height: '600',\n        menubar: 'no',\n        toolbar: 'no',\n        location: 'no',\n        status: 'no',\n    }\n    const feature = Object.keys(featureParams).map(key => key + '=' + featureParams[key]).join(',')\n\n    // ポップアップ表示\n    const authWindow = window.open('https://accounts.google.com/o/oauth2/v2/auth?' + query, \"Google Login\", feature);\n\n    // 認証処理\n    return new Promise((resolve, reject) => {\n        (function checkAuth() {\n            // ポップアップが閉じられるまで待つ\n            if (authWindow && !authWindow.closed) {\n                setTimeout(checkAuth, 100);\n                return;\n            }\n\n            // 閉じたらcookieをチェック\n            if (hasAuth(scopes)) {\n                resolve();\n            } else {\n                reject('auth was rejected');\n            }\n        })();\n    });\n}\n\ninterface ExecParam {\n    url: string\n    scopes: string[]\n    method: \"GET\" | \"POST\"\n    body?: string | Blob | ArrayBufferView | ArrayBuffer | FormData | URLSearchParams | ReadableStream<Uint8Array> | null | undefined\n    headers?: Record<string, string>\n}\n\n","import React from 'react';\r\nimport './LoginButton.css'\r\n\r\nexport default class extends React.Component<IProps> {\r\n    render() {\r\n        return (\r\n            <span id=\"GoogleButton\">\r\n                <button onClick={this.props.onClick} className={this.props.thema}></button>\r\n            </span>\r\n        )\r\n    }\r\n}\r\ninterface IProps{\r\n    onClick? : (event:React.MouseEvent<HTMLButtonElement, MouseEvent>) => any\r\n    thema : 'dark' | 'light'\r\n}","import React from 'react';\r\nimport * as GoogleAuth from '../../lib/GoogleAuth'\r\nimport LoginButton from './LoginButton'\r\n\r\nexport default class extends React.Component<{ scopes: string[], onAuth?: () => void }> {\r\n  state = {\r\n    hasAuth: false,\r\n  }\r\n  async login() {\r\n    await GoogleAuth.auth(this.props.scopes);\r\n    this.setState({ hasAuth: true });\r\n    if (this.props.onAuth) this.props.onAuth();\r\n  }\r\n\r\n  logout() {\r\n    GoogleAuth.clearAuthCookie();\r\n    this.setState({ hasAuth: false });\r\n  }\r\n\r\n  componentWillMount() {\r\n    if (GoogleAuth.hasAuth(this.props.scopes)) {\r\n      this.setState({ hasAuth: true });\r\n      if (this.props.onAuth) this.props.onAuth();\r\n    } else {\r\n      this.setState({ hasAuth: false });\r\n    }\r\n  }\r\n  render() {\r\n    if (this.state.hasAuth) {\r\n      return (\r\n        <div>\r\n          <header>\r\n            <div style={{ textAlign: 'right' }}>\r\n              <button onClick={e => this.logout()}>ログアウト</button>\r\n            </div>\r\n          </header>\r\n          {this.props.children}\r\n        </div>\r\n      )\r\n    } else {\r\n      return (\r\n        <div>\r\n          <p>サービスをご利用いただくためには、Googleアカウントが必要です。</p>\r\n          <LoginButton thema='dark' onClick={e => this.login()} />\r\n        </div>\r\n      )\r\n    }\r\n  }\r\n}\r\n","import React from 'react';\nimport * as GoogleAuth from '../../lib/GoogleAuth';\nimport { Link } from 'react-router-dom';\nimport GAuth from '../../component/Google/Auth'\n\nconst scopes = [\n  'https://www.googleapis.com/auth/photoslibrary',\n  'https://www.googleapis.com/auth/photoslibrary.sharing',\n];\nexport default class extends React.Component {\n  state: IState = {\n    titleText: '',\n    waitForCreate: false,\n  }\n  private async getSharedAlbumsList() {\n    const listResult = await GoogleAuth.exec({\n      url: \"https://photoslibrary.googleapis.com/v1/sharedAlbums\",\n      method: \"GET\",\n      scopes: ['https://www.googleapis.com/auth/photoslibrary'],\n    });\n    console.log(listResult)\n    this.setState({ sharedAlbumsList: listResult });\n  }\n  async createSharedAlbum() {\n    const title = this.state.titleText;\n    this.setState({ titleText: '', waitForCreate: true });\n    try {\n      // アルバムの作成\n      const createResult = await GoogleAuth.exec({\n        url: \"https://photoslibrary.googleapis.com/v1/albums\",\n        method: \"POST\",\n        scopes: ['https://www.googleapis.com/auth/photoslibrary'],\n        body: JSON.stringify({\n          album: { title }\n        }),\n      });\n      console.log(createResult);\n      if (!createResult.id) throw new Error('cannot create album');\n\n      // アルバムの共有\n      const shareResult = await GoogleAuth.exec({\n        url: 'https://photoslibrary.googleapis.com/v1/albums/' + createResult.id + ':share',\n        method: \"POST\",\n        scopes: ['https://www.googleapis.com/auth/photoslibrary.sharing'],\n        body: JSON.stringify({\n          sharedAlbumOptions: {\n            isCollaborative: true,\n            isCommentable: true,\n          }\n        }),\n      });\n      console.log(shareResult)\n\n      // 一覧情報の更新\n      await this.getSharedAlbumsList();\n    } finally {\n      this.setState({ waitForCreate: false });\n    }\n  }\n  render() {\n    return (\n      <GAuth scopes={scopes} onAuth={() => this.getSharedAlbumsList()}>\n        <h2>共有アルバムの新規作成</h2>\n        タイトル<input type=\"text\" onChange={e => this.setState({ titleText: e.target.value })} value={this.state.titleText} required />\n        <button onClick={e => this.createSharedAlbum()} disabled={this.state.waitForCreate}>新規作成</button>\n        <hr />\n        <h2>共有アルバム一覧</h2>\n        {(() => {\n          if (!this.state.sharedAlbumsList) return;\n          if (!this.state.sharedAlbumsList.sharedAlbums) return;\n          return (\n            <table style={{ margin: \"auto\", }}>\n              <thead>\n                <tr>\n                  <td>アルバム名</td>\n                  <td>写真投稿ページ</td>\n                </tr>\n              </thead>\n              <tbody>\n                {this.state.sharedAlbumsList.sharedAlbums.map((album: GoogleAuth.Album) => (\n                  <tr key={album.id}>\n                    <th style={{ textAlign: \"left\" }}>\n                      <a href={album.shareInfo ? album.shareInfo.shareableUrl : album.productUrl} about=\"_blank\">\n                        {album.title || '[no title]'}\n                      </a>\n                    </th>\n                    <td>\n                      {album.shareInfo ? (<Link to={'/upload/' + album.shareInfo.shareToken} target=\"new\">写真投稿ページへ</Link>) : \"\"}\n                    </td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          );\n        })()}\n      </GAuth>\n    )\n  }\n}\ninterface IState {\n  sharedAlbumsList?: {\n    sharedAlbums?: GoogleAuth.Album[],\n    nextPageToken?: string,\n    prevPageToken?: string,\n  }\n  titleText: string\n  waitForCreate: boolean\n}\n\n","import React from 'react';\r\nimport { RouteComponentProps } from 'react-router';\r\nimport * as GoogleAuth from '../../lib/GoogleAuth'\r\nimport GAuth from '../../component/Google/Auth'\r\n\r\ninterface AppState {\r\n  images: File[]\r\n  album?: GoogleAuth.Album\r\n  uploading: boolean\r\n}\r\nconst scopes = [\r\n  'https://www.googleapis.com/auth/photoslibrary',\r\n  'https://www.googleapis.com/auth/photoslibrary.sharing',\r\n  'https://www.googleapis.com/auth/photoslibrary.appendonly',\r\n];\r\nexport default class extends React.Component<RouteComponentProps<{ id: string }>> {\r\n  state: AppState = {\r\n    images: [],\r\n    uploading: false,\r\n  }\r\n  async onAuth() {\r\n    const album = await this.getSharedAlbum()\r\n    if (album.shareInfo && album.shareInfo.isJoined) {\r\n      // 参加済み\r\n      this.setState({ album });\r\n    } else {\r\n      this.setState({ album: await this.joinAlbum() });\r\n    }\r\n  }\r\n  async getSharedAlbum(): Promise<GoogleAuth.Album> {\r\n    const { id } = this.props.match.params;\r\n    return GoogleAuth.exec({\r\n      url: 'https://photoslibrary.googleapis.com/v1/sharedAlbums/' + id,\r\n      method: 'GET',\r\n      scopes: ['https://www.googleapis.com/auth/photoslibrary.sharing'],\r\n    });\r\n  }\r\n  async joinAlbum(): Promise<GoogleAuth.Album> {\r\n    const { id } = this.props.match.params;\r\n    const ret = await GoogleAuth.exec({\r\n      url: 'https://photoslibrary.googleapis.com/v1/sharedAlbums:join',\r\n      method: 'POST',\r\n      scopes: ['https://www.googleapis.com/auth/photoslibrary.sharing'],\r\n      body: JSON.stringify({\r\n        shareToken: id\r\n      }),\r\n    })\r\n    return ret.album;\r\n  }\r\n  async uploadMedia(file: File, album: GoogleAuth.Album) {\r\n    this.setState({ uploading: true })\r\n    try {\r\n      // upload media\r\n      const uploadToken: string = await GoogleAuth.exec({\r\n        url: 'https://photoslibrary.googleapis.com/v1/uploads',\r\n        method: 'POST',\r\n        scopes: [],\r\n        headers: {\r\n          'Content-type': 'application/octet-stream',\r\n          // 'X-Goog-Upload-File-Name': file.name,\r\n          'X-Goog-Upload-Protocol': 'raw',\r\n        },\r\n        body: file,\r\n      });\r\n\r\n      // media to album\r\n      const results = await GoogleAuth.exec({\r\n        url: 'https://photoslibrary.googleapis.com/v1/mediaItems:batchCreate',\r\n        method: 'POST',\r\n        scopes: ['https://www.googleapis.com/auth/photoslibrary', 'https://www.googleapis.com/auth/photoslibrary.sharing'],\r\n        body: JSON.stringify({\r\n          albumId: album.id,\r\n          newMediaItems: [\r\n            {\r\n              description: \"\",\r\n              simpleMediaItem: { uploadToken },\r\n            }\r\n          ]\r\n        }),\r\n      });\r\n      results.newMediaItemResults.forEach((res: any) => {\r\n        if (res.status.code) alert(res.status.message);\r\n      })\r\n    } finally {\r\n      this.setState({ uploading: false })\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <GAuth scopes={scopes} onAuth={() => this.onAuth()}>\r\n        {(() => {\r\n          if (!this.state.album) return;\r\n          const album = this.state.album;\r\n          return (\r\n            <div>\r\n              <h2>写真を投稿する</h2>\r\n              <label htmlFor=\"upload\">\r\n                <input\r\n                  type=\"file\"\r\n                  id=\"upload\"\r\n                  accept=\"image/*\"\r\n                  capture\r\n                  onChange={e => this.onImageUploaded(e.target, album)}\r\n                  disabled={this.state.uploading}\r\n                />\r\n              </label>\r\n            </div>\r\n          );\r\n        })()}\r\n        <hr />\r\n        <div style={{ margin: '20px auto' }}>\r\n          {this.state.album && this.state.album.shareInfo ? (<a href={this.state.album.shareInfo.shareableUrl}>アルバムを見る</a>) : \"\"}\r\n        </div>\r\n        <hr />\r\n        <h2>投稿済み写真</h2>\r\n        {this.state.images.map((file, idx) => (\r\n          <img key={idx} src={URL.createObjectURL(file)} alt={file.name} style={{ maxWidth: '300px', maxHeight: '300px' }} />\r\n        ))}\r\n      </GAuth>\r\n    );\r\n  }\r\n  async onImageUploaded(e: HTMLInputElement, album: GoogleAuth.Album) {\r\n    if (!e.files || e.files.length === 0) return;\r\n    const file = e.files[0];\r\n    await this.uploadMedia(file, album);\r\n    e.value = '';\r\n    this.setState({ images: this.state.images.concat(file) });\r\n  }\r\n}\r\n","import React from 'react';\nimport * as GoogleAuth from '../lib/GoogleAuth';\n\nexport default class extends React.Component<IProps> {\n    componentDidMount() {\n        // cookieにトークン情報を設定\n        GoogleAuth.setCookieFromAuth();\n        window.close();\n    }\n    render() {\n        return (\n            <p>This window will close automatically</p>\n        )\n    }\n}\ninterface IProps {\n    scops: string[]\n}\n","import React from 'react';\nimport { BrowserRouter, Route, Switch, Redirect } from 'react-router-dom';\nimport AlbumList from './photo/AlbumList'\nimport PhotoUpload from './photo/Upload'\nimport Auth from './Auth'\nexport default class extends React.Component {\n  render() {\n    return (\n      <BrowserRouter basename={process.env.PUBLIC_URL}>\n        <Switch>\n          <Route exact path=\"/auth\" component={Auth} />\n          <Redirect exact from=\"/\" to=\"/album/list\" />\n          <Route exact path=\"/album/list\" component={AlbumList} />\n          <Route exact path=\"/upload/:id\" component={PhotoUpload} />\n          <Route exact path=\"/error\" render={() => <h1>Error</h1>} />\n          <Route render={() => <h1>404 Not Found</h1>} />\n        </Switch>\n      </BrowserRouter>\n    )\n  }\n}\n\n\n","import React from 'react';\nimport './App.css';\nimport Route from './route/Route'\n\nexport default class extends React.Component {\n  componentDidCatch() {\n    window.location.href = '/error';\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <Route />\n      </div>\n    )\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}